DevOps Control Platform - AI Implementation Prompt
Project Objective
Create a comprehensive, enterprise-grade DevOps management platform that unifies Kubernetes operations, infrastructure automation, observability tools, and secure access controls in a single web interface.

Core Technology Stack
Backend: Python with Django and Django REST Framework

Frontend: React with TypeScript and Material-UI components

Database: PostgreSQL

Message Broker: Redis for Celery tasks

Containerization: Docker and Docker Compose

Authentication: JWT tokens with role-based access control

Required Feature Modules
1. User Management & Security
Default superuser (admin/admin) with forced password change on first login

Role-based permissions: Super Admin, Operator (read/write), Viewer (read-only)

Encrypted credential storage for user-specific SSH keys, passwords, and API tokens

Comprehensive audit logging of all user actions

2. Kubernetes Cluster Management
Cluster creation wizard requesting:

Cluster name and environment

HAProxy IP address (optional)

Master node IP addresses (multiple)

Worker node IP addresses (multiple)

Bulk script execution across all cluster nodes simultaneously

Cluster status dashboard showing all registered clusters and their health

Reconfiguration capability for existing clusters with pre-populated IP addresses

3. Machine Registry
Centralized machine inventory with IP, hostname, and application name

Support for registering multiple machines for cluster provisioning

Machine grouping and tagging capabilities

Connection testing and validation features

4. Web-Based SSH Terminal
Integrated xterm.js terminal in the browser

Secure WebSocket proxy for SSH connections

Use of stored user credentials for authentication

Session recording and logging

5. Dashboard Integration Catalog
Support for adding multiple dashboard types:

Kubernetes Dashboard (with token-based auth)

ArgoCD (username/password)

Kiali, Grafana, Prometheus, Alertmanager, Kibana

Auto-login functionality using stored user credentials

Dashboard-cluster association for context

Secure credential injection

6. Automation Engine (Semaphore-like)
Complete Ansible playbook management interface

Playbook storage and versioning

Task scheduling and execution

Real-time task output streaming

Inventory management and SSH key storage

7. Infrastructure as Code (Terraform)
Terraform project management interface

Plan/Apply/Destroy operations via UI

State file management

Real-time execution logs

Workspace support

Security Requirements
All credentials encrypted at rest in database

Secure WebSocket connections for SSH terminals

API rate limiting and protection

Comprehensive audit trails for compliance

Session management and timeout controls

Architecture Requirements
Microservices-ready modular design with separate Django apps

API-first architecture with RESTful endpoints

Frontend-backend complete decoupling

Asynchronous task processing using Celery

Containerized deployment with Docker

Database & Storage
PostgreSQL for all data persistence

Encrypted fields for sensitive data

Proper indexing for performance

Migration scripts for initial setup

Deliverables Specification
Provide complete, production-ready implementation including:

Backend API: Full Django REST Framework implementation with all models, serializers, views, and URLs

Frontend UI: Complete React application with components for all features

Database Schema: PostgreSQL-compatible models with migrations

Docker Configuration: Multi-container setup with Docker Compose

Security Implementation: JWT auth, encryption, and access controls

Documentation: Setup and deployment instructions